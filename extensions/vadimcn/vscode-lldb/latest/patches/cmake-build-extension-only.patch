diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0132c82..83e871c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -16,13 +16,6 @@ endif()
 set(VERSION "${VERSION}${VERSION_SUFFIX}")
 message("Version ${VERSION}")
 
-set(LLDB_PACKAGE $ENV{LLDB_PACKAGE} CACHE PATH "Zip archive containing LLDB files")
-if (LLDB_PACKAGE)
-    message("Using LLDB_PACKAGE=${LLDB_PACKAGE}")
-else()
-    message(FATAL_ERROR "LLDB_PACKAGE not set." )
-endif()
-
 set(CMAKE_CTEST_ARGUMENTS "--output-on-failure" CACHE INTERNAL "CTest arguments")
 
 set(TEST_TIMEOUT 5000 CACHE STRING "Test timeout [ms]")
@@ -116,33 +109,9 @@ configure_file(webpack.config.mjs ${CMAKE_CURRENT_BINARY_DIR}/webpack.config.mjs
 configure_file(vscode.test.mjs ${CMAKE_CURRENT_BINARY_DIR}/.vscode-test.mjs)
 
 set(PLATFORM_PACKAGE_URL "https://github.com/vadimcn/codelldb/releases/download/v\${version}/\${platformPackage}" CACHE STRING "")
-configure_file(package.json ${CMAKE_CURRENT_BINARY_DIR}/package.json @ONLY)
-# We still need to resolve codelldb schema $ref's in it, but we'll do this during the build.
-file(COPY_FILE ${CMAKE_CURRENT_BINARY_DIR}/package.json ${CMAKE_CURRENT_BINARY_DIR}/package.pre.json)
-file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/package-lock.json ${CMAKE_CURRENT_BINARY_DIR}/package-lock.json)
-# Install node_modules
-execute_process(
-    COMMAND ${NPM} install
-    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-    RESULT_VARIABLE Result
-)
-if (NOT ${Result} EQUAL 0)
-    message(FATAL_ERROR "npm install failed: ${Result}")
-endif()
-# So we can commit any changes
-file(COPY_FILE ${CMAKE_CURRENT_BINARY_DIR}/package-lock.json ${CMAKE_CURRENT_SOURCE_DIR}/package-lock.json)
-
-# Generate schema for codelldb types, resolve references to them in package.pre.json yielding the final package.json
-add_custom_command(
-    OUTPUT ${CMAKE_BINARY_DIR}/package.json ${CMAKE_BINARY_DIR}/generated/codelldb.ts
-    DEPENDS ${CMAKE_SOURCE_DIR}/package.json ${CMAKE_SOURCE_DIR}/src/codelldb-types/src/lib.rs
-    COMMAND cargo run --package codelldb-types -- ${CMAKE_BINARY_DIR}/codelldb.schema.json
-    COMMAND ${WithEnv} NODE_PATH=${CMAKE_CURRENT_BINARY_DIR}/node_modules node ${CMAKE_CURRENT_SOURCE_DIR}/tools/prep-package.js
-            ${CMAKE_CURRENT_BINARY_DIR}/package.pre.json ${CMAKE_CURRENT_BINARY_DIR}/package.json
-    COMMAND ${NPM} run json2ts -- ${CMAKE_BINARY_DIR}/codelldb.schema.json ${CMAKE_BINARY_DIR}/generated/codelldb.ts
-    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-    USES_TERMINAL
-)
+
+# Nix: package.json and generated/codelldb.ts are provided by the codelldb-types derivation
+# They are copied into the build directory in postConfigure phase
 add_custom_target(package_json
     DEPENDS ${CMAKE_BINARY_DIR}/package.json
 )
@@ -161,6 +130,7 @@ add_custom_target(update_lockfiles
 
 add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/README.md ${CMAKE_CURRENT_BINARY_DIR}/README.md)
 add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/CHANGELOG.md ${CMAKE_CURRENT_BINARY_DIR}/CHANGELOG.md)
+add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE ${CMAKE_CURRENT_BINARY_DIR}/LICENSE)
 add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/images/lldb.png ${CMAKE_CURRENT_BINARY_DIR}/images/lldb.png)
 add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/images/user.svg ${CMAKE_CURRENT_BINARY_DIR}/images/user.svg)
 add_copy_file(PackageFiles ${CMAKE_CURRENT_SOURCE_DIR}/images/users.svg ${CMAKE_CURRENT_BINARY_DIR}/images/users.svg)
@@ -177,6 +147,7 @@ add_custom_target(dev_debugging
 set(PackagedFilesBootstrap
     README.md
     CHANGELOG.md
+    LICENSE
     extension.js
     images/*
     syntaxes/*
